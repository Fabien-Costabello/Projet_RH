
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Employe
 * 
 */
export type Employe = $Result.DefaultSelection<Prisma.$EmployePayload>
/**
 * Model Entreprise
 * 
 */
export type Entreprise = $Result.DefaultSelection<Prisma.$EntreprisePayload>
/**
 * Model Ordinateur
 * 
 */
export type Ordinateur = $Result.DefaultSelection<Prisma.$OrdinateurPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Employes
 * const employes = await prisma.employe.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Employes
   * const employes = await prisma.employe.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.employe`: Exposes CRUD operations for the **Employe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employes
    * const employes = await prisma.employe.findMany()
    * ```
    */
  get employe(): Prisma.EmployeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.entreprise`: Exposes CRUD operations for the **Entreprise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Entreprises
    * const entreprises = await prisma.entreprise.findMany()
    * ```
    */
  get entreprise(): Prisma.EntrepriseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ordinateur`: Exposes CRUD operations for the **Ordinateur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ordinateurs
    * const ordinateurs = await prisma.ordinateur.findMany()
    * ```
    */
  get ordinateur(): Prisma.OrdinateurDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.2.1
   * Query Engine version: 4123509d24aa4dede1e864b46351bf2790323b69
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Employe: 'Employe',
    Entreprise: 'Entreprise',
    Ordinateur: 'Ordinateur'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "employe" | "entreprise" | "ordinateur"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Employe: {
        payload: Prisma.$EmployePayload<ExtArgs>
        fields: Prisma.EmployeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployePayload>
          }
          findFirst: {
            args: Prisma.EmployeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployePayload>
          }
          findMany: {
            args: Prisma.EmployeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployePayload>[]
          }
          create: {
            args: Prisma.EmployeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployePayload>
          }
          createMany: {
            args: Prisma.EmployeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EmployeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployePayload>
          }
          update: {
            args: Prisma.EmployeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployePayload>
          }
          deleteMany: {
            args: Prisma.EmployeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployePayload>
          }
          aggregate: {
            args: Prisma.EmployeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmploye>
          }
          groupBy: {
            args: Prisma.EmployeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeCountAggregateOutputType> | number
          }
        }
      }
      Entreprise: {
        payload: Prisma.$EntreprisePayload<ExtArgs>
        fields: Prisma.EntrepriseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EntrepriseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EntrepriseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          findFirst: {
            args: Prisma.EntrepriseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EntrepriseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          findMany: {
            args: Prisma.EntrepriseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>[]
          }
          create: {
            args: Prisma.EntrepriseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          createMany: {
            args: Prisma.EntrepriseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EntrepriseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          update: {
            args: Prisma.EntrepriseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          deleteMany: {
            args: Prisma.EntrepriseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EntrepriseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EntrepriseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          aggregate: {
            args: Prisma.EntrepriseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEntreprise>
          }
          groupBy: {
            args: Prisma.EntrepriseGroupByArgs<ExtArgs>
            result: $Utils.Optional<EntrepriseGroupByOutputType>[]
          }
          count: {
            args: Prisma.EntrepriseCountArgs<ExtArgs>
            result: $Utils.Optional<EntrepriseCountAggregateOutputType> | number
          }
        }
      }
      Ordinateur: {
        payload: Prisma.$OrdinateurPayload<ExtArgs>
        fields: Prisma.OrdinateurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrdinateurFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrdinateurFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload>
          }
          findFirst: {
            args: Prisma.OrdinateurFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrdinateurFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload>
          }
          findMany: {
            args: Prisma.OrdinateurFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload>[]
          }
          create: {
            args: Prisma.OrdinateurCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload>
          }
          createMany: {
            args: Prisma.OrdinateurCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OrdinateurDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload>
          }
          update: {
            args: Prisma.OrdinateurUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload>
          }
          deleteMany: {
            args: Prisma.OrdinateurDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrdinateurUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrdinateurUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload>
          }
          aggregate: {
            args: Prisma.OrdinateurAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrdinateur>
          }
          groupBy: {
            args: Prisma.OrdinateurGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrdinateurGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrdinateurCountArgs<ExtArgs>
            result: $Utils.Optional<OrdinateurCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    employe?: EmployeOmit
    entreprise?: EntrepriseOmit
    ordinateur?: OrdinateurOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EntrepriseCountOutputType
   */

  export type EntrepriseCountOutputType = {
    employes: number
    ordinateurs: number
  }

  export type EntrepriseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employes?: boolean | EntrepriseCountOutputTypeCountEmployesArgs
    ordinateurs?: boolean | EntrepriseCountOutputTypeCountOrdinateursArgs
  }

  // Custom InputTypes
  /**
   * EntrepriseCountOutputType without action
   */
  export type EntrepriseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntrepriseCountOutputType
     */
    select?: EntrepriseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EntrepriseCountOutputType without action
   */
  export type EntrepriseCountOutputTypeCountEmployesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeWhereInput
  }

  /**
   * EntrepriseCountOutputType without action
   */
  export type EntrepriseCountOutputTypeCountOrdinateursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrdinateurWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Employe
   */

  export type AggregateEmploye = {
    _count: EmployeCountAggregateOutputType | null
    _avg: EmployeAvgAggregateOutputType | null
    _sum: EmployeSumAggregateOutputType | null
    _min: EmployeMinAggregateOutputType | null
    _max: EmployeMaxAggregateOutputType | null
  }

  export type EmployeAvgAggregateOutputType = {
    id: number | null
    age: number | null
    entrepriseId: number | null
    ordinateurID: number | null
  }

  export type EmployeSumAggregateOutputType = {
    id: number | null
    age: number | null
    entrepriseId: number | null
    ordinateurID: number | null
  }

  export type EmployeMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    mail: string | null
    age: number | null
    Genre: string | null
    password: string | null
    avatar: string | null
    entrepriseId: number | null
    ordinateurID: number | null
  }

  export type EmployeMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    mail: string | null
    age: number | null
    Genre: string | null
    password: string | null
    avatar: string | null
    entrepriseId: number | null
    ordinateurID: number | null
  }

  export type EmployeCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    mail: number
    age: number
    Genre: number
    password: number
    avatar: number
    entrepriseId: number
    ordinateurID: number
    _all: number
  }


  export type EmployeAvgAggregateInputType = {
    id?: true
    age?: true
    entrepriseId?: true
    ordinateurID?: true
  }

  export type EmployeSumAggregateInputType = {
    id?: true
    age?: true
    entrepriseId?: true
    ordinateurID?: true
  }

  export type EmployeMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    mail?: true
    age?: true
    Genre?: true
    password?: true
    avatar?: true
    entrepriseId?: true
    ordinateurID?: true
  }

  export type EmployeMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    mail?: true
    age?: true
    Genre?: true
    password?: true
    avatar?: true
    entrepriseId?: true
    ordinateurID?: true
  }

  export type EmployeCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    mail?: true
    age?: true
    Genre?: true
    password?: true
    avatar?: true
    entrepriseId?: true
    ordinateurID?: true
    _all?: true
  }

  export type EmployeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employe to aggregate.
     */
    where?: EmployeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employes to fetch.
     */
    orderBy?: EmployeOrderByWithRelationInput | EmployeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employes
    **/
    _count?: true | EmployeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeMaxAggregateInputType
  }

  export type GetEmployeAggregateType<T extends EmployeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmploye]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmploye[P]>
      : GetScalarType<T[P], AggregateEmploye[P]>
  }




  export type EmployeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeWhereInput
    orderBy?: EmployeOrderByWithAggregationInput | EmployeOrderByWithAggregationInput[]
    by: EmployeScalarFieldEnum[] | EmployeScalarFieldEnum
    having?: EmployeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeCountAggregateInputType | true
    _avg?: EmployeAvgAggregateInputType
    _sum?: EmployeSumAggregateInputType
    _min?: EmployeMinAggregateInputType
    _max?: EmployeMaxAggregateInputType
  }

  export type EmployeGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    mail: string
    age: number
    Genre: string
    password: string
    avatar: string
    entrepriseId: number
    ordinateurID: number | null
    _count: EmployeCountAggregateOutputType | null
    _avg: EmployeAvgAggregateOutputType | null
    _sum: EmployeSumAggregateOutputType | null
    _min: EmployeMinAggregateOutputType | null
    _max: EmployeMaxAggregateOutputType | null
  }

  type GetEmployeGroupByPayload<T extends EmployeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    mail?: boolean
    age?: boolean
    Genre?: boolean
    password?: boolean
    avatar?: boolean
    entrepriseId?: boolean
    ordinateurID?: boolean
    entreprise?: boolean | EntrepriseDefaultArgs<ExtArgs>
    ordinateur?: boolean | Employe$ordinateurArgs<ExtArgs>
  }, ExtArgs["result"]["employe"]>



  export type EmployeSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    mail?: boolean
    age?: boolean
    Genre?: boolean
    password?: boolean
    avatar?: boolean
    entrepriseId?: boolean
    ordinateurID?: boolean
  }

  export type EmployeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "mail" | "age" | "Genre" | "password" | "avatar" | "entrepriseId" | "ordinateurID", ExtArgs["result"]["employe"]>
  export type EmployeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entreprise?: boolean | EntrepriseDefaultArgs<ExtArgs>
    ordinateur?: boolean | Employe$ordinateurArgs<ExtArgs>
  }

  export type $EmployePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employe"
    objects: {
      entreprise: Prisma.$EntreprisePayload<ExtArgs>
      ordinateur: Prisma.$OrdinateurPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string
      lastName: string
      mail: string
      age: number
      Genre: string
      password: string
      avatar: string
      entrepriseId: number
      ordinateurID: number | null
    }, ExtArgs["result"]["employe"]>
    composites: {}
  }

  type EmployeGetPayload<S extends boolean | null | undefined | EmployeDefaultArgs> = $Result.GetResult<Prisma.$EmployePayload, S>

  type EmployeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployeCountAggregateInputType | true
    }

  export interface EmployeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employe'], meta: { name: 'Employe' } }
    /**
     * Find zero or one Employe that matches the filter.
     * @param {EmployeFindUniqueArgs} args - Arguments to find a Employe
     * @example
     * // Get one Employe
     * const employe = await prisma.employe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeFindUniqueArgs>(args: SelectSubset<T, EmployeFindUniqueArgs<ExtArgs>>): Prisma__EmployeClient<$Result.GetResult<Prisma.$EmployePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Employe that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployeFindUniqueOrThrowArgs} args - Arguments to find a Employe
     * @example
     * // Get one Employe
     * const employe = await prisma.employe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeClient<$Result.GetResult<Prisma.$EmployePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Employe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeFindFirstArgs} args - Arguments to find a Employe
     * @example
     * // Get one Employe
     * const employe = await prisma.employe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeFindFirstArgs>(args?: SelectSubset<T, EmployeFindFirstArgs<ExtArgs>>): Prisma__EmployeClient<$Result.GetResult<Prisma.$EmployePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Employe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeFindFirstOrThrowArgs} args - Arguments to find a Employe
     * @example
     * // Get one Employe
     * const employe = await prisma.employe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeClient<$Result.GetResult<Prisma.$EmployePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Employes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employes
     * const employes = await prisma.employe.findMany()
     * 
     * // Get first 10 Employes
     * const employes = await prisma.employe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeWithIdOnly = await prisma.employe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeFindManyArgs>(args?: SelectSubset<T, EmployeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Employe.
     * @param {EmployeCreateArgs} args - Arguments to create a Employe.
     * @example
     * // Create one Employe
     * const Employe = await prisma.employe.create({
     *   data: {
     *     // ... data to create a Employe
     *   }
     * })
     * 
     */
    create<T extends EmployeCreateArgs>(args: SelectSubset<T, EmployeCreateArgs<ExtArgs>>): Prisma__EmployeClient<$Result.GetResult<Prisma.$EmployePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Employes.
     * @param {EmployeCreateManyArgs} args - Arguments to create many Employes.
     * @example
     * // Create many Employes
     * const employe = await prisma.employe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeCreateManyArgs>(args?: SelectSubset<T, EmployeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Employe.
     * @param {EmployeDeleteArgs} args - Arguments to delete one Employe.
     * @example
     * // Delete one Employe
     * const Employe = await prisma.employe.delete({
     *   where: {
     *     // ... filter to delete one Employe
     *   }
     * })
     * 
     */
    delete<T extends EmployeDeleteArgs>(args: SelectSubset<T, EmployeDeleteArgs<ExtArgs>>): Prisma__EmployeClient<$Result.GetResult<Prisma.$EmployePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Employe.
     * @param {EmployeUpdateArgs} args - Arguments to update one Employe.
     * @example
     * // Update one Employe
     * const employe = await prisma.employe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeUpdateArgs>(args: SelectSubset<T, EmployeUpdateArgs<ExtArgs>>): Prisma__EmployeClient<$Result.GetResult<Prisma.$EmployePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Employes.
     * @param {EmployeDeleteManyArgs} args - Arguments to filter Employes to delete.
     * @example
     * // Delete a few Employes
     * const { count } = await prisma.employe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeDeleteManyArgs>(args?: SelectSubset<T, EmployeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employes
     * const employe = await prisma.employe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeUpdateManyArgs>(args: SelectSubset<T, EmployeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employe.
     * @param {EmployeUpsertArgs} args - Arguments to update or create a Employe.
     * @example
     * // Update or create a Employe
     * const employe = await prisma.employe.upsert({
     *   create: {
     *     // ... data to create a Employe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employe we want to update
     *   }
     * })
     */
    upsert<T extends EmployeUpsertArgs>(args: SelectSubset<T, EmployeUpsertArgs<ExtArgs>>): Prisma__EmployeClient<$Result.GetResult<Prisma.$EmployePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Employes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeCountArgs} args - Arguments to filter Employes to count.
     * @example
     * // Count the number of Employes
     * const count = await prisma.employe.count({
     *   where: {
     *     // ... the filter for the Employes we want to count
     *   }
     * })
    **/
    count<T extends EmployeCountArgs>(
      args?: Subset<T, EmployeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeAggregateArgs>(args: Subset<T, EmployeAggregateArgs>): Prisma.PrismaPromise<GetEmployeAggregateType<T>>

    /**
     * Group by Employe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employe model
   */
  readonly fields: EmployeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    entreprise<T extends EntrepriseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EntrepriseDefaultArgs<ExtArgs>>): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    ordinateur<T extends Employe$ordinateurArgs<ExtArgs> = {}>(args?: Subset<T, Employe$ordinateurArgs<ExtArgs>>): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employe model
   */ 
  interface EmployeFieldRefs {
    readonly id: FieldRef<"Employe", 'Int'>
    readonly firstName: FieldRef<"Employe", 'String'>
    readonly lastName: FieldRef<"Employe", 'String'>
    readonly mail: FieldRef<"Employe", 'String'>
    readonly age: FieldRef<"Employe", 'Int'>
    readonly Genre: FieldRef<"Employe", 'String'>
    readonly password: FieldRef<"Employe", 'String'>
    readonly avatar: FieldRef<"Employe", 'String'>
    readonly entrepriseId: FieldRef<"Employe", 'Int'>
    readonly ordinateurID: FieldRef<"Employe", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Employe findUnique
   */
  export type EmployeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employe
     */
    select?: EmployeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employe
     */
    omit?: EmployeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeInclude<ExtArgs> | null
    /**
     * Filter, which Employe to fetch.
     */
    where: EmployeWhereUniqueInput
  }

  /**
   * Employe findUniqueOrThrow
   */
  export type EmployeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employe
     */
    select?: EmployeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employe
     */
    omit?: EmployeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeInclude<ExtArgs> | null
    /**
     * Filter, which Employe to fetch.
     */
    where: EmployeWhereUniqueInput
  }

  /**
   * Employe findFirst
   */
  export type EmployeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employe
     */
    select?: EmployeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employe
     */
    omit?: EmployeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeInclude<ExtArgs> | null
    /**
     * Filter, which Employe to fetch.
     */
    where?: EmployeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employes to fetch.
     */
    orderBy?: EmployeOrderByWithRelationInput | EmployeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employes.
     */
    cursor?: EmployeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employes.
     */
    distinct?: EmployeScalarFieldEnum | EmployeScalarFieldEnum[]
  }

  /**
   * Employe findFirstOrThrow
   */
  export type EmployeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employe
     */
    select?: EmployeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employe
     */
    omit?: EmployeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeInclude<ExtArgs> | null
    /**
     * Filter, which Employe to fetch.
     */
    where?: EmployeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employes to fetch.
     */
    orderBy?: EmployeOrderByWithRelationInput | EmployeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employes.
     */
    cursor?: EmployeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employes.
     */
    distinct?: EmployeScalarFieldEnum | EmployeScalarFieldEnum[]
  }

  /**
   * Employe findMany
   */
  export type EmployeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employe
     */
    select?: EmployeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employe
     */
    omit?: EmployeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeInclude<ExtArgs> | null
    /**
     * Filter, which Employes to fetch.
     */
    where?: EmployeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employes to fetch.
     */
    orderBy?: EmployeOrderByWithRelationInput | EmployeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employes.
     */
    cursor?: EmployeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employes.
     */
    skip?: number
    distinct?: EmployeScalarFieldEnum | EmployeScalarFieldEnum[]
  }

  /**
   * Employe create
   */
  export type EmployeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employe
     */
    select?: EmployeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employe
     */
    omit?: EmployeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employe.
     */
    data: XOR<EmployeCreateInput, EmployeUncheckedCreateInput>
  }

  /**
   * Employe createMany
   */
  export type EmployeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employes.
     */
    data: EmployeCreateManyInput | EmployeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employe update
   */
  export type EmployeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employe
     */
    select?: EmployeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employe
     */
    omit?: EmployeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employe.
     */
    data: XOR<EmployeUpdateInput, EmployeUncheckedUpdateInput>
    /**
     * Choose, which Employe to update.
     */
    where: EmployeWhereUniqueInput
  }

  /**
   * Employe updateMany
   */
  export type EmployeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employes.
     */
    data: XOR<EmployeUpdateManyMutationInput, EmployeUncheckedUpdateManyInput>
    /**
     * Filter which Employes to update
     */
    where?: EmployeWhereInput
  }

  /**
   * Employe upsert
   */
  export type EmployeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employe
     */
    select?: EmployeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employe
     */
    omit?: EmployeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employe to update in case it exists.
     */
    where: EmployeWhereUniqueInput
    /**
     * In case the Employe found by the `where` argument doesn't exist, create a new Employe with this data.
     */
    create: XOR<EmployeCreateInput, EmployeUncheckedCreateInput>
    /**
     * In case the Employe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeUpdateInput, EmployeUncheckedUpdateInput>
  }

  /**
   * Employe delete
   */
  export type EmployeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employe
     */
    select?: EmployeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employe
     */
    omit?: EmployeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeInclude<ExtArgs> | null
    /**
     * Filter which Employe to delete.
     */
    where: EmployeWhereUniqueInput
  }

  /**
   * Employe deleteMany
   */
  export type EmployeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employes to delete
     */
    where?: EmployeWhereInput
  }

  /**
   * Employe.ordinateur
   */
  export type Employe$ordinateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ordinateur
     */
    omit?: OrdinateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdinateurInclude<ExtArgs> | null
    where?: OrdinateurWhereInput
  }

  /**
   * Employe without action
   */
  export type EmployeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employe
     */
    select?: EmployeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employe
     */
    omit?: EmployeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeInclude<ExtArgs> | null
  }


  /**
   * Model Entreprise
   */

  export type AggregateEntreprise = {
    _count: EntrepriseCountAggregateOutputType | null
    _avg: EntrepriseAvgAggregateOutputType | null
    _sum: EntrepriseSumAggregateOutputType | null
    _min: EntrepriseMinAggregateOutputType | null
    _max: EntrepriseMaxAggregateOutputType | null
  }

  export type EntrepriseAvgAggregateOutputType = {
    siret: number | null
  }

  export type EntrepriseSumAggregateOutputType = {
    siret: number | null
  }

  export type EntrepriseMinAggregateOutputType = {
    raisonSociale: string | null
    siret: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
  }

  export type EntrepriseMaxAggregateOutputType = {
    raisonSociale: string | null
    siret: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
  }

  export type EntrepriseCountAggregateOutputType = {
    raisonSociale: number
    siret: number
    firstName: number
    lastName: number
    email: number
    password: number
    _all: number
  }


  export type EntrepriseAvgAggregateInputType = {
    siret?: true
  }

  export type EntrepriseSumAggregateInputType = {
    siret?: true
  }

  export type EntrepriseMinAggregateInputType = {
    raisonSociale?: true
    siret?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
  }

  export type EntrepriseMaxAggregateInputType = {
    raisonSociale?: true
    siret?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
  }

  export type EntrepriseCountAggregateInputType = {
    raisonSociale?: true
    siret?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    _all?: true
  }

  export type EntrepriseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Entreprise to aggregate.
     */
    where?: EntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entreprises to fetch.
     */
    orderBy?: EntrepriseOrderByWithRelationInput | EntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Entreprises
    **/
    _count?: true | EntrepriseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EntrepriseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EntrepriseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EntrepriseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EntrepriseMaxAggregateInputType
  }

  export type GetEntrepriseAggregateType<T extends EntrepriseAggregateArgs> = {
        [P in keyof T & keyof AggregateEntreprise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEntreprise[P]>
      : GetScalarType<T[P], AggregateEntreprise[P]>
  }




  export type EntrepriseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntrepriseWhereInput
    orderBy?: EntrepriseOrderByWithAggregationInput | EntrepriseOrderByWithAggregationInput[]
    by: EntrepriseScalarFieldEnum[] | EntrepriseScalarFieldEnum
    having?: EntrepriseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EntrepriseCountAggregateInputType | true
    _avg?: EntrepriseAvgAggregateInputType
    _sum?: EntrepriseSumAggregateInputType
    _min?: EntrepriseMinAggregateInputType
    _max?: EntrepriseMaxAggregateInputType
  }

  export type EntrepriseGroupByOutputType = {
    raisonSociale: string
    siret: number
    firstName: string
    lastName: string
    email: string
    password: string
    _count: EntrepriseCountAggregateOutputType | null
    _avg: EntrepriseAvgAggregateOutputType | null
    _sum: EntrepriseSumAggregateOutputType | null
    _min: EntrepriseMinAggregateOutputType | null
    _max: EntrepriseMaxAggregateOutputType | null
  }

  type GetEntrepriseGroupByPayload<T extends EntrepriseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EntrepriseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EntrepriseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EntrepriseGroupByOutputType[P]>
            : GetScalarType<T[P], EntrepriseGroupByOutputType[P]>
        }
      >
    >


  export type EntrepriseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    raisonSociale?: boolean
    siret?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    employes?: boolean | Entreprise$employesArgs<ExtArgs>
    ordinateurs?: boolean | Entreprise$ordinateursArgs<ExtArgs>
    _count?: boolean | EntrepriseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["entreprise"]>



  export type EntrepriseSelectScalar = {
    raisonSociale?: boolean
    siret?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
  }

  export type EntrepriseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"raisonSociale" | "siret" | "firstName" | "lastName" | "email" | "password", ExtArgs["result"]["entreprise"]>
  export type EntrepriseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employes?: boolean | Entreprise$employesArgs<ExtArgs>
    ordinateurs?: boolean | Entreprise$ordinateursArgs<ExtArgs>
    _count?: boolean | EntrepriseCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EntreprisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Entreprise"
    objects: {
      employes: Prisma.$EmployePayload<ExtArgs>[]
      ordinateurs: Prisma.$OrdinateurPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      raisonSociale: string
      siret: number
      firstName: string
      lastName: string
      email: string
      password: string
    }, ExtArgs["result"]["entreprise"]>
    composites: {}
  }

  type EntrepriseGetPayload<S extends boolean | null | undefined | EntrepriseDefaultArgs> = $Result.GetResult<Prisma.$EntreprisePayload, S>

  type EntrepriseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EntrepriseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EntrepriseCountAggregateInputType | true
    }

  export interface EntrepriseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Entreprise'], meta: { name: 'Entreprise' } }
    /**
     * Find zero or one Entreprise that matches the filter.
     * @param {EntrepriseFindUniqueArgs} args - Arguments to find a Entreprise
     * @example
     * // Get one Entreprise
     * const entreprise = await prisma.entreprise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EntrepriseFindUniqueArgs>(args: SelectSubset<T, EntrepriseFindUniqueArgs<ExtArgs>>): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Entreprise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EntrepriseFindUniqueOrThrowArgs} args - Arguments to find a Entreprise
     * @example
     * // Get one Entreprise
     * const entreprise = await prisma.entreprise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EntrepriseFindUniqueOrThrowArgs>(args: SelectSubset<T, EntrepriseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Entreprise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseFindFirstArgs} args - Arguments to find a Entreprise
     * @example
     * // Get one Entreprise
     * const entreprise = await prisma.entreprise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EntrepriseFindFirstArgs>(args?: SelectSubset<T, EntrepriseFindFirstArgs<ExtArgs>>): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Entreprise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseFindFirstOrThrowArgs} args - Arguments to find a Entreprise
     * @example
     * // Get one Entreprise
     * const entreprise = await prisma.entreprise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EntrepriseFindFirstOrThrowArgs>(args?: SelectSubset<T, EntrepriseFindFirstOrThrowArgs<ExtArgs>>): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Entreprises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Entreprises
     * const entreprises = await prisma.entreprise.findMany()
     * 
     * // Get first 10 Entreprises
     * const entreprises = await prisma.entreprise.findMany({ take: 10 })
     * 
     * // Only select the `raisonSociale`
     * const entrepriseWithRaisonSocialeOnly = await prisma.entreprise.findMany({ select: { raisonSociale: true } })
     * 
     */
    findMany<T extends EntrepriseFindManyArgs>(args?: SelectSubset<T, EntrepriseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Entreprise.
     * @param {EntrepriseCreateArgs} args - Arguments to create a Entreprise.
     * @example
     * // Create one Entreprise
     * const Entreprise = await prisma.entreprise.create({
     *   data: {
     *     // ... data to create a Entreprise
     *   }
     * })
     * 
     */
    create<T extends EntrepriseCreateArgs>(args: SelectSubset<T, EntrepriseCreateArgs<ExtArgs>>): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Entreprises.
     * @param {EntrepriseCreateManyArgs} args - Arguments to create many Entreprises.
     * @example
     * // Create many Entreprises
     * const entreprise = await prisma.entreprise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EntrepriseCreateManyArgs>(args?: SelectSubset<T, EntrepriseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Entreprise.
     * @param {EntrepriseDeleteArgs} args - Arguments to delete one Entreprise.
     * @example
     * // Delete one Entreprise
     * const Entreprise = await prisma.entreprise.delete({
     *   where: {
     *     // ... filter to delete one Entreprise
     *   }
     * })
     * 
     */
    delete<T extends EntrepriseDeleteArgs>(args: SelectSubset<T, EntrepriseDeleteArgs<ExtArgs>>): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Entreprise.
     * @param {EntrepriseUpdateArgs} args - Arguments to update one Entreprise.
     * @example
     * // Update one Entreprise
     * const entreprise = await prisma.entreprise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EntrepriseUpdateArgs>(args: SelectSubset<T, EntrepriseUpdateArgs<ExtArgs>>): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Entreprises.
     * @param {EntrepriseDeleteManyArgs} args - Arguments to filter Entreprises to delete.
     * @example
     * // Delete a few Entreprises
     * const { count } = await prisma.entreprise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EntrepriseDeleteManyArgs>(args?: SelectSubset<T, EntrepriseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Entreprises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Entreprises
     * const entreprise = await prisma.entreprise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EntrepriseUpdateManyArgs>(args: SelectSubset<T, EntrepriseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Entreprise.
     * @param {EntrepriseUpsertArgs} args - Arguments to update or create a Entreprise.
     * @example
     * // Update or create a Entreprise
     * const entreprise = await prisma.entreprise.upsert({
     *   create: {
     *     // ... data to create a Entreprise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Entreprise we want to update
     *   }
     * })
     */
    upsert<T extends EntrepriseUpsertArgs>(args: SelectSubset<T, EntrepriseUpsertArgs<ExtArgs>>): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Entreprises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseCountArgs} args - Arguments to filter Entreprises to count.
     * @example
     * // Count the number of Entreprises
     * const count = await prisma.entreprise.count({
     *   where: {
     *     // ... the filter for the Entreprises we want to count
     *   }
     * })
    **/
    count<T extends EntrepriseCountArgs>(
      args?: Subset<T, EntrepriseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EntrepriseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Entreprise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EntrepriseAggregateArgs>(args: Subset<T, EntrepriseAggregateArgs>): Prisma.PrismaPromise<GetEntrepriseAggregateType<T>>

    /**
     * Group by Entreprise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EntrepriseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EntrepriseGroupByArgs['orderBy'] }
        : { orderBy?: EntrepriseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EntrepriseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntrepriseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Entreprise model
   */
  readonly fields: EntrepriseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Entreprise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EntrepriseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employes<T extends Entreprise$employesArgs<ExtArgs> = {}>(args?: Subset<T, Entreprise$employesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    ordinateurs<T extends Entreprise$ordinateursArgs<ExtArgs> = {}>(args?: Subset<T, Entreprise$ordinateursArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Entreprise model
   */ 
  interface EntrepriseFieldRefs {
    readonly raisonSociale: FieldRef<"Entreprise", 'String'>
    readonly siret: FieldRef<"Entreprise", 'Int'>
    readonly firstName: FieldRef<"Entreprise", 'String'>
    readonly lastName: FieldRef<"Entreprise", 'String'>
    readonly email: FieldRef<"Entreprise", 'String'>
    readonly password: FieldRef<"Entreprise", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Entreprise findUnique
   */
  export type EntrepriseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entreprise
     */
    omit?: EntrepriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * Filter, which Entreprise to fetch.
     */
    where: EntrepriseWhereUniqueInput
  }

  /**
   * Entreprise findUniqueOrThrow
   */
  export type EntrepriseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entreprise
     */
    omit?: EntrepriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * Filter, which Entreprise to fetch.
     */
    where: EntrepriseWhereUniqueInput
  }

  /**
   * Entreprise findFirst
   */
  export type EntrepriseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entreprise
     */
    omit?: EntrepriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * Filter, which Entreprise to fetch.
     */
    where?: EntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entreprises to fetch.
     */
    orderBy?: EntrepriseOrderByWithRelationInput | EntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entreprises.
     */
    cursor?: EntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entreprises.
     */
    distinct?: EntrepriseScalarFieldEnum | EntrepriseScalarFieldEnum[]
  }

  /**
   * Entreprise findFirstOrThrow
   */
  export type EntrepriseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entreprise
     */
    omit?: EntrepriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * Filter, which Entreprise to fetch.
     */
    where?: EntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entreprises to fetch.
     */
    orderBy?: EntrepriseOrderByWithRelationInput | EntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entreprises.
     */
    cursor?: EntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entreprises.
     */
    distinct?: EntrepriseScalarFieldEnum | EntrepriseScalarFieldEnum[]
  }

  /**
   * Entreprise findMany
   */
  export type EntrepriseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entreprise
     */
    omit?: EntrepriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * Filter, which Entreprises to fetch.
     */
    where?: EntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entreprises to fetch.
     */
    orderBy?: EntrepriseOrderByWithRelationInput | EntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Entreprises.
     */
    cursor?: EntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entreprises.
     */
    skip?: number
    distinct?: EntrepriseScalarFieldEnum | EntrepriseScalarFieldEnum[]
  }

  /**
   * Entreprise create
   */
  export type EntrepriseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entreprise
     */
    omit?: EntrepriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * The data needed to create a Entreprise.
     */
    data: XOR<EntrepriseCreateInput, EntrepriseUncheckedCreateInput>
  }

  /**
   * Entreprise createMany
   */
  export type EntrepriseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Entreprises.
     */
    data: EntrepriseCreateManyInput | EntrepriseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Entreprise update
   */
  export type EntrepriseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entreprise
     */
    omit?: EntrepriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * The data needed to update a Entreprise.
     */
    data: XOR<EntrepriseUpdateInput, EntrepriseUncheckedUpdateInput>
    /**
     * Choose, which Entreprise to update.
     */
    where: EntrepriseWhereUniqueInput
  }

  /**
   * Entreprise updateMany
   */
  export type EntrepriseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Entreprises.
     */
    data: XOR<EntrepriseUpdateManyMutationInput, EntrepriseUncheckedUpdateManyInput>
    /**
     * Filter which Entreprises to update
     */
    where?: EntrepriseWhereInput
  }

  /**
   * Entreprise upsert
   */
  export type EntrepriseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entreprise
     */
    omit?: EntrepriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * The filter to search for the Entreprise to update in case it exists.
     */
    where: EntrepriseWhereUniqueInput
    /**
     * In case the Entreprise found by the `where` argument doesn't exist, create a new Entreprise with this data.
     */
    create: XOR<EntrepriseCreateInput, EntrepriseUncheckedCreateInput>
    /**
     * In case the Entreprise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EntrepriseUpdateInput, EntrepriseUncheckedUpdateInput>
  }

  /**
   * Entreprise delete
   */
  export type EntrepriseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entreprise
     */
    omit?: EntrepriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * Filter which Entreprise to delete.
     */
    where: EntrepriseWhereUniqueInput
  }

  /**
   * Entreprise deleteMany
   */
  export type EntrepriseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Entreprises to delete
     */
    where?: EntrepriseWhereInput
  }

  /**
   * Entreprise.employes
   */
  export type Entreprise$employesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employe
     */
    select?: EmployeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employe
     */
    omit?: EmployeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeInclude<ExtArgs> | null
    where?: EmployeWhereInput
    orderBy?: EmployeOrderByWithRelationInput | EmployeOrderByWithRelationInput[]
    cursor?: EmployeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeScalarFieldEnum | EmployeScalarFieldEnum[]
  }

  /**
   * Entreprise.ordinateurs
   */
  export type Entreprise$ordinateursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ordinateur
     */
    omit?: OrdinateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdinateurInclude<ExtArgs> | null
    where?: OrdinateurWhereInput
    orderBy?: OrdinateurOrderByWithRelationInput | OrdinateurOrderByWithRelationInput[]
    cursor?: OrdinateurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdinateurScalarFieldEnum | OrdinateurScalarFieldEnum[]
  }

  /**
   * Entreprise without action
   */
  export type EntrepriseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entreprise
     */
    omit?: EntrepriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntrepriseInclude<ExtArgs> | null
  }


  /**
   * Model Ordinateur
   */

  export type AggregateOrdinateur = {
    _count: OrdinateurCountAggregateOutputType | null
    _avg: OrdinateurAvgAggregateOutputType | null
    _sum: OrdinateurSumAggregateOutputType | null
    _min: OrdinateurMinAggregateOutputType | null
    _max: OrdinateurMaxAggregateOutputType | null
  }

  export type OrdinateurAvgAggregateOutputType = {
    id: number | null
    entrepriseId: number | null
    employeId: number | null
  }

  export type OrdinateurSumAggregateOutputType = {
    id: number | null
    entrepriseId: number | null
    employeId: number | null
  }

  export type OrdinateurMinAggregateOutputType = {
    id: number | null
    macAdress: string | null
    Working: boolean | null
    entrepriseId: number | null
    employeId: number | null
  }

  export type OrdinateurMaxAggregateOutputType = {
    id: number | null
    macAdress: string | null
    Working: boolean | null
    entrepriseId: number | null
    employeId: number | null
  }

  export type OrdinateurCountAggregateOutputType = {
    id: number
    macAdress: number
    Working: number
    entrepriseId: number
    employeId: number
    _all: number
  }


  export type OrdinateurAvgAggregateInputType = {
    id?: true
    entrepriseId?: true
    employeId?: true
  }

  export type OrdinateurSumAggregateInputType = {
    id?: true
    entrepriseId?: true
    employeId?: true
  }

  export type OrdinateurMinAggregateInputType = {
    id?: true
    macAdress?: true
    Working?: true
    entrepriseId?: true
    employeId?: true
  }

  export type OrdinateurMaxAggregateInputType = {
    id?: true
    macAdress?: true
    Working?: true
    entrepriseId?: true
    employeId?: true
  }

  export type OrdinateurCountAggregateInputType = {
    id?: true
    macAdress?: true
    Working?: true
    entrepriseId?: true
    employeId?: true
    _all?: true
  }

  export type OrdinateurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ordinateur to aggregate.
     */
    where?: OrdinateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ordinateurs to fetch.
     */
    orderBy?: OrdinateurOrderByWithRelationInput | OrdinateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrdinateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ordinateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ordinateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ordinateurs
    **/
    _count?: true | OrdinateurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdinateurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdinateurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdinateurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdinateurMaxAggregateInputType
  }

  export type GetOrdinateurAggregateType<T extends OrdinateurAggregateArgs> = {
        [P in keyof T & keyof AggregateOrdinateur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrdinateur[P]>
      : GetScalarType<T[P], AggregateOrdinateur[P]>
  }




  export type OrdinateurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrdinateurWhereInput
    orderBy?: OrdinateurOrderByWithAggregationInput | OrdinateurOrderByWithAggregationInput[]
    by: OrdinateurScalarFieldEnum[] | OrdinateurScalarFieldEnum
    having?: OrdinateurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdinateurCountAggregateInputType | true
    _avg?: OrdinateurAvgAggregateInputType
    _sum?: OrdinateurSumAggregateInputType
    _min?: OrdinateurMinAggregateInputType
    _max?: OrdinateurMaxAggregateInputType
  }

  export type OrdinateurGroupByOutputType = {
    id: number
    macAdress: string
    Working: boolean
    entrepriseId: number
    employeId: number | null
    _count: OrdinateurCountAggregateOutputType | null
    _avg: OrdinateurAvgAggregateOutputType | null
    _sum: OrdinateurSumAggregateOutputType | null
    _min: OrdinateurMinAggregateOutputType | null
    _max: OrdinateurMaxAggregateOutputType | null
  }

  type GetOrdinateurGroupByPayload<T extends OrdinateurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrdinateurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdinateurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdinateurGroupByOutputType[P]>
            : GetScalarType<T[P], OrdinateurGroupByOutputType[P]>
        }
      >
    >


  export type OrdinateurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    macAdress?: boolean
    Working?: boolean
    entrepriseId?: boolean
    employeId?: boolean
    entreprise?: boolean | EntrepriseDefaultArgs<ExtArgs>
    employe?: boolean | Ordinateur$employeArgs<ExtArgs>
  }, ExtArgs["result"]["ordinateur"]>



  export type OrdinateurSelectScalar = {
    id?: boolean
    macAdress?: boolean
    Working?: boolean
    entrepriseId?: boolean
    employeId?: boolean
  }

  export type OrdinateurOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "macAdress" | "Working" | "entrepriseId" | "employeId", ExtArgs["result"]["ordinateur"]>
  export type OrdinateurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entreprise?: boolean | EntrepriseDefaultArgs<ExtArgs>
    employe?: boolean | Ordinateur$employeArgs<ExtArgs>
  }

  export type $OrdinateurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ordinateur"
    objects: {
      entreprise: Prisma.$EntreprisePayload<ExtArgs>
      employe: Prisma.$EmployePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      macAdress: string
      Working: boolean
      entrepriseId: number
      employeId: number | null
    }, ExtArgs["result"]["ordinateur"]>
    composites: {}
  }

  type OrdinateurGetPayload<S extends boolean | null | undefined | OrdinateurDefaultArgs> = $Result.GetResult<Prisma.$OrdinateurPayload, S>

  type OrdinateurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrdinateurFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrdinateurCountAggregateInputType | true
    }

  export interface OrdinateurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ordinateur'], meta: { name: 'Ordinateur' } }
    /**
     * Find zero or one Ordinateur that matches the filter.
     * @param {OrdinateurFindUniqueArgs} args - Arguments to find a Ordinateur
     * @example
     * // Get one Ordinateur
     * const ordinateur = await prisma.ordinateur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrdinateurFindUniqueArgs>(args: SelectSubset<T, OrdinateurFindUniqueArgs<ExtArgs>>): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Ordinateur that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrdinateurFindUniqueOrThrowArgs} args - Arguments to find a Ordinateur
     * @example
     * // Get one Ordinateur
     * const ordinateur = await prisma.ordinateur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrdinateurFindUniqueOrThrowArgs>(args: SelectSubset<T, OrdinateurFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Ordinateur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdinateurFindFirstArgs} args - Arguments to find a Ordinateur
     * @example
     * // Get one Ordinateur
     * const ordinateur = await prisma.ordinateur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrdinateurFindFirstArgs>(args?: SelectSubset<T, OrdinateurFindFirstArgs<ExtArgs>>): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Ordinateur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdinateurFindFirstOrThrowArgs} args - Arguments to find a Ordinateur
     * @example
     * // Get one Ordinateur
     * const ordinateur = await prisma.ordinateur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrdinateurFindFirstOrThrowArgs>(args?: SelectSubset<T, OrdinateurFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Ordinateurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdinateurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ordinateurs
     * const ordinateurs = await prisma.ordinateur.findMany()
     * 
     * // Get first 10 Ordinateurs
     * const ordinateurs = await prisma.ordinateur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ordinateurWithIdOnly = await prisma.ordinateur.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrdinateurFindManyArgs>(args?: SelectSubset<T, OrdinateurFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Ordinateur.
     * @param {OrdinateurCreateArgs} args - Arguments to create a Ordinateur.
     * @example
     * // Create one Ordinateur
     * const Ordinateur = await prisma.ordinateur.create({
     *   data: {
     *     // ... data to create a Ordinateur
     *   }
     * })
     * 
     */
    create<T extends OrdinateurCreateArgs>(args: SelectSubset<T, OrdinateurCreateArgs<ExtArgs>>): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Ordinateurs.
     * @param {OrdinateurCreateManyArgs} args - Arguments to create many Ordinateurs.
     * @example
     * // Create many Ordinateurs
     * const ordinateur = await prisma.ordinateur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrdinateurCreateManyArgs>(args?: SelectSubset<T, OrdinateurCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ordinateur.
     * @param {OrdinateurDeleteArgs} args - Arguments to delete one Ordinateur.
     * @example
     * // Delete one Ordinateur
     * const Ordinateur = await prisma.ordinateur.delete({
     *   where: {
     *     // ... filter to delete one Ordinateur
     *   }
     * })
     * 
     */
    delete<T extends OrdinateurDeleteArgs>(args: SelectSubset<T, OrdinateurDeleteArgs<ExtArgs>>): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Ordinateur.
     * @param {OrdinateurUpdateArgs} args - Arguments to update one Ordinateur.
     * @example
     * // Update one Ordinateur
     * const ordinateur = await prisma.ordinateur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrdinateurUpdateArgs>(args: SelectSubset<T, OrdinateurUpdateArgs<ExtArgs>>): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Ordinateurs.
     * @param {OrdinateurDeleteManyArgs} args - Arguments to filter Ordinateurs to delete.
     * @example
     * // Delete a few Ordinateurs
     * const { count } = await prisma.ordinateur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrdinateurDeleteManyArgs>(args?: SelectSubset<T, OrdinateurDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ordinateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdinateurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ordinateurs
     * const ordinateur = await prisma.ordinateur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrdinateurUpdateManyArgs>(args: SelectSubset<T, OrdinateurUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ordinateur.
     * @param {OrdinateurUpsertArgs} args - Arguments to update or create a Ordinateur.
     * @example
     * // Update or create a Ordinateur
     * const ordinateur = await prisma.ordinateur.upsert({
     *   create: {
     *     // ... data to create a Ordinateur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ordinateur we want to update
     *   }
     * })
     */
    upsert<T extends OrdinateurUpsertArgs>(args: SelectSubset<T, OrdinateurUpsertArgs<ExtArgs>>): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Ordinateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdinateurCountArgs} args - Arguments to filter Ordinateurs to count.
     * @example
     * // Count the number of Ordinateurs
     * const count = await prisma.ordinateur.count({
     *   where: {
     *     // ... the filter for the Ordinateurs we want to count
     *   }
     * })
    **/
    count<T extends OrdinateurCountArgs>(
      args?: Subset<T, OrdinateurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdinateurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ordinateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdinateurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdinateurAggregateArgs>(args: Subset<T, OrdinateurAggregateArgs>): Prisma.PrismaPromise<GetOrdinateurAggregateType<T>>

    /**
     * Group by Ordinateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdinateurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrdinateurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrdinateurGroupByArgs['orderBy'] }
        : { orderBy?: OrdinateurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrdinateurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdinateurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ordinateur model
   */
  readonly fields: OrdinateurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ordinateur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrdinateurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    entreprise<T extends EntrepriseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EntrepriseDefaultArgs<ExtArgs>>): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    employe<T extends Ordinateur$employeArgs<ExtArgs> = {}>(args?: Subset<T, Ordinateur$employeArgs<ExtArgs>>): Prisma__EmployeClient<$Result.GetResult<Prisma.$EmployePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ordinateur model
   */ 
  interface OrdinateurFieldRefs {
    readonly id: FieldRef<"Ordinateur", 'Int'>
    readonly macAdress: FieldRef<"Ordinateur", 'String'>
    readonly Working: FieldRef<"Ordinateur", 'Boolean'>
    readonly entrepriseId: FieldRef<"Ordinateur", 'Int'>
    readonly employeId: FieldRef<"Ordinateur", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Ordinateur findUnique
   */
  export type OrdinateurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ordinateur
     */
    omit?: OrdinateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * Filter, which Ordinateur to fetch.
     */
    where: OrdinateurWhereUniqueInput
  }

  /**
   * Ordinateur findUniqueOrThrow
   */
  export type OrdinateurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ordinateur
     */
    omit?: OrdinateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * Filter, which Ordinateur to fetch.
     */
    where: OrdinateurWhereUniqueInput
  }

  /**
   * Ordinateur findFirst
   */
  export type OrdinateurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ordinateur
     */
    omit?: OrdinateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * Filter, which Ordinateur to fetch.
     */
    where?: OrdinateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ordinateurs to fetch.
     */
    orderBy?: OrdinateurOrderByWithRelationInput | OrdinateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ordinateurs.
     */
    cursor?: OrdinateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ordinateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ordinateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ordinateurs.
     */
    distinct?: OrdinateurScalarFieldEnum | OrdinateurScalarFieldEnum[]
  }

  /**
   * Ordinateur findFirstOrThrow
   */
  export type OrdinateurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ordinateur
     */
    omit?: OrdinateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * Filter, which Ordinateur to fetch.
     */
    where?: OrdinateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ordinateurs to fetch.
     */
    orderBy?: OrdinateurOrderByWithRelationInput | OrdinateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ordinateurs.
     */
    cursor?: OrdinateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ordinateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ordinateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ordinateurs.
     */
    distinct?: OrdinateurScalarFieldEnum | OrdinateurScalarFieldEnum[]
  }

  /**
   * Ordinateur findMany
   */
  export type OrdinateurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ordinateur
     */
    omit?: OrdinateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * Filter, which Ordinateurs to fetch.
     */
    where?: OrdinateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ordinateurs to fetch.
     */
    orderBy?: OrdinateurOrderByWithRelationInput | OrdinateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ordinateurs.
     */
    cursor?: OrdinateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ordinateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ordinateurs.
     */
    skip?: number
    distinct?: OrdinateurScalarFieldEnum | OrdinateurScalarFieldEnum[]
  }

  /**
   * Ordinateur create
   */
  export type OrdinateurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ordinateur
     */
    omit?: OrdinateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * The data needed to create a Ordinateur.
     */
    data: XOR<OrdinateurCreateInput, OrdinateurUncheckedCreateInput>
  }

  /**
   * Ordinateur createMany
   */
  export type OrdinateurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ordinateurs.
     */
    data: OrdinateurCreateManyInput | OrdinateurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ordinateur update
   */
  export type OrdinateurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ordinateur
     */
    omit?: OrdinateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * The data needed to update a Ordinateur.
     */
    data: XOR<OrdinateurUpdateInput, OrdinateurUncheckedUpdateInput>
    /**
     * Choose, which Ordinateur to update.
     */
    where: OrdinateurWhereUniqueInput
  }

  /**
   * Ordinateur updateMany
   */
  export type OrdinateurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ordinateurs.
     */
    data: XOR<OrdinateurUpdateManyMutationInput, OrdinateurUncheckedUpdateManyInput>
    /**
     * Filter which Ordinateurs to update
     */
    where?: OrdinateurWhereInput
  }

  /**
   * Ordinateur upsert
   */
  export type OrdinateurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ordinateur
     */
    omit?: OrdinateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * The filter to search for the Ordinateur to update in case it exists.
     */
    where: OrdinateurWhereUniqueInput
    /**
     * In case the Ordinateur found by the `where` argument doesn't exist, create a new Ordinateur with this data.
     */
    create: XOR<OrdinateurCreateInput, OrdinateurUncheckedCreateInput>
    /**
     * In case the Ordinateur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrdinateurUpdateInput, OrdinateurUncheckedUpdateInput>
  }

  /**
   * Ordinateur delete
   */
  export type OrdinateurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ordinateur
     */
    omit?: OrdinateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * Filter which Ordinateur to delete.
     */
    where: OrdinateurWhereUniqueInput
  }

  /**
   * Ordinateur deleteMany
   */
  export type OrdinateurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ordinateurs to delete
     */
    where?: OrdinateurWhereInput
  }

  /**
   * Ordinateur.employe
   */
  export type Ordinateur$employeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employe
     */
    select?: EmployeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employe
     */
    omit?: EmployeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeInclude<ExtArgs> | null
    where?: EmployeWhereInput
  }

  /**
   * Ordinateur without action
   */
  export type OrdinateurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ordinateur
     */
    omit?: OrdinateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrdinateurInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EmployeScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    mail: 'mail',
    age: 'age',
    Genre: 'Genre',
    password: 'password',
    avatar: 'avatar',
    entrepriseId: 'entrepriseId',
    ordinateurID: 'ordinateurID'
  };

  export type EmployeScalarFieldEnum = (typeof EmployeScalarFieldEnum)[keyof typeof EmployeScalarFieldEnum]


  export const EntrepriseScalarFieldEnum: {
    raisonSociale: 'raisonSociale',
    siret: 'siret',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password'
  };

  export type EntrepriseScalarFieldEnum = (typeof EntrepriseScalarFieldEnum)[keyof typeof EntrepriseScalarFieldEnum]


  export const OrdinateurScalarFieldEnum: {
    id: 'id',
    macAdress: 'macAdress',
    Working: 'Working',
    entrepriseId: 'entrepriseId',
    employeId: 'employeId'
  };

  export type OrdinateurScalarFieldEnum = (typeof OrdinateurScalarFieldEnum)[keyof typeof OrdinateurScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const EmployeOrderByRelevanceFieldEnum: {
    firstName: 'firstName',
    lastName: 'lastName',
    mail: 'mail',
    Genre: 'Genre',
    password: 'password',
    avatar: 'avatar'
  };

  export type EmployeOrderByRelevanceFieldEnum = (typeof EmployeOrderByRelevanceFieldEnum)[keyof typeof EmployeOrderByRelevanceFieldEnum]


  export const EntrepriseOrderByRelevanceFieldEnum: {
    raisonSociale: 'raisonSociale',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password'
  };

  export type EntrepriseOrderByRelevanceFieldEnum = (typeof EntrepriseOrderByRelevanceFieldEnum)[keyof typeof EntrepriseOrderByRelevanceFieldEnum]


  export const OrdinateurOrderByRelevanceFieldEnum: {
    macAdress: 'macAdress'
  };

  export type OrdinateurOrderByRelevanceFieldEnum = (typeof OrdinateurOrderByRelevanceFieldEnum)[keyof typeof OrdinateurOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type EmployeWhereInput = {
    AND?: EmployeWhereInput | EmployeWhereInput[]
    OR?: EmployeWhereInput[]
    NOT?: EmployeWhereInput | EmployeWhereInput[]
    id?: IntFilter<"Employe"> | number
    firstName?: StringFilter<"Employe"> | string
    lastName?: StringFilter<"Employe"> | string
    mail?: StringFilter<"Employe"> | string
    age?: IntFilter<"Employe"> | number
    Genre?: StringFilter<"Employe"> | string
    password?: StringFilter<"Employe"> | string
    avatar?: StringFilter<"Employe"> | string
    entrepriseId?: IntFilter<"Employe"> | number
    ordinateurID?: IntNullableFilter<"Employe"> | number | null
    entreprise?: XOR<EntrepriseScalarRelationFilter, EntrepriseWhereInput>
    ordinateur?: XOR<OrdinateurNullableScalarRelationFilter, OrdinateurWhereInput> | null
  }

  export type EmployeOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    mail?: SortOrder
    age?: SortOrder
    Genre?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    entrepriseId?: SortOrder
    ordinateurID?: SortOrderInput | SortOrder
    entreprise?: EntrepriseOrderByWithRelationInput
    ordinateur?: OrdinateurOrderByWithRelationInput
    _relevance?: EmployeOrderByRelevanceInput
  }

  export type EmployeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    mail?: string
    ordinateurID?: number
    AND?: EmployeWhereInput | EmployeWhereInput[]
    OR?: EmployeWhereInput[]
    NOT?: EmployeWhereInput | EmployeWhereInput[]
    firstName?: StringFilter<"Employe"> | string
    lastName?: StringFilter<"Employe"> | string
    age?: IntFilter<"Employe"> | number
    Genre?: StringFilter<"Employe"> | string
    password?: StringFilter<"Employe"> | string
    avatar?: StringFilter<"Employe"> | string
    entrepriseId?: IntFilter<"Employe"> | number
    entreprise?: XOR<EntrepriseScalarRelationFilter, EntrepriseWhereInput>
    ordinateur?: XOR<OrdinateurNullableScalarRelationFilter, OrdinateurWhereInput> | null
  }, "id" | "mail" | "ordinateurID">

  export type EmployeOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    mail?: SortOrder
    age?: SortOrder
    Genre?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    entrepriseId?: SortOrder
    ordinateurID?: SortOrderInput | SortOrder
    _count?: EmployeCountOrderByAggregateInput
    _avg?: EmployeAvgOrderByAggregateInput
    _max?: EmployeMaxOrderByAggregateInput
    _min?: EmployeMinOrderByAggregateInput
    _sum?: EmployeSumOrderByAggregateInput
  }

  export type EmployeScalarWhereWithAggregatesInput = {
    AND?: EmployeScalarWhereWithAggregatesInput | EmployeScalarWhereWithAggregatesInput[]
    OR?: EmployeScalarWhereWithAggregatesInput[]
    NOT?: EmployeScalarWhereWithAggregatesInput | EmployeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Employe"> | number
    firstName?: StringWithAggregatesFilter<"Employe"> | string
    lastName?: StringWithAggregatesFilter<"Employe"> | string
    mail?: StringWithAggregatesFilter<"Employe"> | string
    age?: IntWithAggregatesFilter<"Employe"> | number
    Genre?: StringWithAggregatesFilter<"Employe"> | string
    password?: StringWithAggregatesFilter<"Employe"> | string
    avatar?: StringWithAggregatesFilter<"Employe"> | string
    entrepriseId?: IntWithAggregatesFilter<"Employe"> | number
    ordinateurID?: IntNullableWithAggregatesFilter<"Employe"> | number | null
  }

  export type EntrepriseWhereInput = {
    AND?: EntrepriseWhereInput | EntrepriseWhereInput[]
    OR?: EntrepriseWhereInput[]
    NOT?: EntrepriseWhereInput | EntrepriseWhereInput[]
    raisonSociale?: StringFilter<"Entreprise"> | string
    siret?: IntFilter<"Entreprise"> | number
    firstName?: StringFilter<"Entreprise"> | string
    lastName?: StringFilter<"Entreprise"> | string
    email?: StringFilter<"Entreprise"> | string
    password?: StringFilter<"Entreprise"> | string
    employes?: EmployeListRelationFilter
    ordinateurs?: OrdinateurListRelationFilter
  }

  export type EntrepriseOrderByWithRelationInput = {
    raisonSociale?: SortOrder
    siret?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    employes?: EmployeOrderByRelationAggregateInput
    ordinateurs?: OrdinateurOrderByRelationAggregateInput
    _relevance?: EntrepriseOrderByRelevanceInput
  }

  export type EntrepriseWhereUniqueInput = Prisma.AtLeast<{
    siret?: number
    email?: string
    AND?: EntrepriseWhereInput | EntrepriseWhereInput[]
    OR?: EntrepriseWhereInput[]
    NOT?: EntrepriseWhereInput | EntrepriseWhereInput[]
    raisonSociale?: StringFilter<"Entreprise"> | string
    firstName?: StringFilter<"Entreprise"> | string
    lastName?: StringFilter<"Entreprise"> | string
    password?: StringFilter<"Entreprise"> | string
    employes?: EmployeListRelationFilter
    ordinateurs?: OrdinateurListRelationFilter
  }, "siret" | "siret" | "email">

  export type EntrepriseOrderByWithAggregationInput = {
    raisonSociale?: SortOrder
    siret?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: EntrepriseCountOrderByAggregateInput
    _avg?: EntrepriseAvgOrderByAggregateInput
    _max?: EntrepriseMaxOrderByAggregateInput
    _min?: EntrepriseMinOrderByAggregateInput
    _sum?: EntrepriseSumOrderByAggregateInput
  }

  export type EntrepriseScalarWhereWithAggregatesInput = {
    AND?: EntrepriseScalarWhereWithAggregatesInput | EntrepriseScalarWhereWithAggregatesInput[]
    OR?: EntrepriseScalarWhereWithAggregatesInput[]
    NOT?: EntrepriseScalarWhereWithAggregatesInput | EntrepriseScalarWhereWithAggregatesInput[]
    raisonSociale?: StringWithAggregatesFilter<"Entreprise"> | string
    siret?: IntWithAggregatesFilter<"Entreprise"> | number
    firstName?: StringWithAggregatesFilter<"Entreprise"> | string
    lastName?: StringWithAggregatesFilter<"Entreprise"> | string
    email?: StringWithAggregatesFilter<"Entreprise"> | string
    password?: StringWithAggregatesFilter<"Entreprise"> | string
  }

  export type OrdinateurWhereInput = {
    AND?: OrdinateurWhereInput | OrdinateurWhereInput[]
    OR?: OrdinateurWhereInput[]
    NOT?: OrdinateurWhereInput | OrdinateurWhereInput[]
    id?: IntFilter<"Ordinateur"> | number
    macAdress?: StringFilter<"Ordinateur"> | string
    Working?: BoolFilter<"Ordinateur"> | boolean
    entrepriseId?: IntFilter<"Ordinateur"> | number
    employeId?: IntNullableFilter<"Ordinateur"> | number | null
    entreprise?: XOR<EntrepriseScalarRelationFilter, EntrepriseWhereInput>
    employe?: XOR<EmployeNullableScalarRelationFilter, EmployeWhereInput> | null
  }

  export type OrdinateurOrderByWithRelationInput = {
    id?: SortOrder
    macAdress?: SortOrder
    Working?: SortOrder
    entrepriseId?: SortOrder
    employeId?: SortOrderInput | SortOrder
    entreprise?: EntrepriseOrderByWithRelationInput
    employe?: EmployeOrderByWithRelationInput
    _relevance?: OrdinateurOrderByRelevanceInput
  }

  export type OrdinateurWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    macAdress?: string
    employeId?: number
    AND?: OrdinateurWhereInput | OrdinateurWhereInput[]
    OR?: OrdinateurWhereInput[]
    NOT?: OrdinateurWhereInput | OrdinateurWhereInput[]
    Working?: BoolFilter<"Ordinateur"> | boolean
    entrepriseId?: IntFilter<"Ordinateur"> | number
    entreprise?: XOR<EntrepriseScalarRelationFilter, EntrepriseWhereInput>
    employe?: XOR<EmployeNullableScalarRelationFilter, EmployeWhereInput> | null
  }, "id" | "macAdress" | "employeId">

  export type OrdinateurOrderByWithAggregationInput = {
    id?: SortOrder
    macAdress?: SortOrder
    Working?: SortOrder
    entrepriseId?: SortOrder
    employeId?: SortOrderInput | SortOrder
    _count?: OrdinateurCountOrderByAggregateInput
    _avg?: OrdinateurAvgOrderByAggregateInput
    _max?: OrdinateurMaxOrderByAggregateInput
    _min?: OrdinateurMinOrderByAggregateInput
    _sum?: OrdinateurSumOrderByAggregateInput
  }

  export type OrdinateurScalarWhereWithAggregatesInput = {
    AND?: OrdinateurScalarWhereWithAggregatesInput | OrdinateurScalarWhereWithAggregatesInput[]
    OR?: OrdinateurScalarWhereWithAggregatesInput[]
    NOT?: OrdinateurScalarWhereWithAggregatesInput | OrdinateurScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ordinateur"> | number
    macAdress?: StringWithAggregatesFilter<"Ordinateur"> | string
    Working?: BoolWithAggregatesFilter<"Ordinateur"> | boolean
    entrepriseId?: IntWithAggregatesFilter<"Ordinateur"> | number
    employeId?: IntNullableWithAggregatesFilter<"Ordinateur"> | number | null
  }

  export type EmployeCreateInput = {
    firstName: string
    lastName: string
    mail: string
    age: number
    Genre: string
    password: string
    avatar?: string
    entreprise: EntrepriseCreateNestedOneWithoutEmployesInput
    ordinateur?: OrdinateurCreateNestedOneWithoutEmployeInput
  }

  export type EmployeUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    mail: string
    age: number
    Genre: string
    password: string
    avatar?: string
    entrepriseId: number
    ordinateurID?: number | null
  }

  export type EmployeUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    Genre?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    entreprise?: EntrepriseUpdateOneRequiredWithoutEmployesNestedInput
    ordinateur?: OrdinateurUpdateOneWithoutEmployeNestedInput
  }

  export type EmployeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    Genre?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    entrepriseId?: IntFieldUpdateOperationsInput | number
    ordinateurID?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EmployeCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    mail: string
    age: number
    Genre: string
    password: string
    avatar?: string
    entrepriseId: number
    ordinateurID?: number | null
  }

  export type EmployeUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    Genre?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    Genre?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    entrepriseId?: IntFieldUpdateOperationsInput | number
    ordinateurID?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EntrepriseCreateInput = {
    raisonSociale: string
    siret: number
    firstName: string
    lastName: string
    email: string
    password: string
    employes?: EmployeCreateNestedManyWithoutEntrepriseInput
    ordinateurs?: OrdinateurCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseUncheckedCreateInput = {
    raisonSociale: string
    siret: number
    firstName: string
    lastName: string
    email: string
    password: string
    employes?: EmployeUncheckedCreateNestedManyWithoutEntrepriseInput
    ordinateurs?: OrdinateurUncheckedCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseUpdateInput = {
    raisonSociale?: StringFieldUpdateOperationsInput | string
    siret?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    employes?: EmployeUpdateManyWithoutEntrepriseNestedInput
    ordinateurs?: OrdinateurUpdateManyWithoutEntrepriseNestedInput
  }

  export type EntrepriseUncheckedUpdateInput = {
    raisonSociale?: StringFieldUpdateOperationsInput | string
    siret?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    employes?: EmployeUncheckedUpdateManyWithoutEntrepriseNestedInput
    ordinateurs?: OrdinateurUncheckedUpdateManyWithoutEntrepriseNestedInput
  }

  export type EntrepriseCreateManyInput = {
    raisonSociale: string
    siret: number
    firstName: string
    lastName: string
    email: string
    password: string
  }

  export type EntrepriseUpdateManyMutationInput = {
    raisonSociale?: StringFieldUpdateOperationsInput | string
    siret?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type EntrepriseUncheckedUpdateManyInput = {
    raisonSociale?: StringFieldUpdateOperationsInput | string
    siret?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type OrdinateurCreateInput = {
    macAdress: string
    Working?: boolean
    employeId?: number | null
    entreprise: EntrepriseCreateNestedOneWithoutOrdinateursInput
    employe?: EmployeCreateNestedOneWithoutOrdinateurInput
  }

  export type OrdinateurUncheckedCreateInput = {
    id?: number
    macAdress: string
    Working?: boolean
    entrepriseId: number
    employeId?: number | null
    employe?: EmployeUncheckedCreateNestedOneWithoutOrdinateurInput
  }

  export type OrdinateurUpdateInput = {
    macAdress?: StringFieldUpdateOperationsInput | string
    Working?: BoolFieldUpdateOperationsInput | boolean
    employeId?: NullableIntFieldUpdateOperationsInput | number | null
    entreprise?: EntrepriseUpdateOneRequiredWithoutOrdinateursNestedInput
    employe?: EmployeUpdateOneWithoutOrdinateurNestedInput
  }

  export type OrdinateurUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    macAdress?: StringFieldUpdateOperationsInput | string
    Working?: BoolFieldUpdateOperationsInput | boolean
    entrepriseId?: IntFieldUpdateOperationsInput | number
    employeId?: NullableIntFieldUpdateOperationsInput | number | null
    employe?: EmployeUncheckedUpdateOneWithoutOrdinateurNestedInput
  }

  export type OrdinateurCreateManyInput = {
    id?: number
    macAdress: string
    Working?: boolean
    entrepriseId: number
    employeId?: number | null
  }

  export type OrdinateurUpdateManyMutationInput = {
    macAdress?: StringFieldUpdateOperationsInput | string
    Working?: BoolFieldUpdateOperationsInput | boolean
    employeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrdinateurUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    macAdress?: StringFieldUpdateOperationsInput | string
    Working?: BoolFieldUpdateOperationsInput | boolean
    entrepriseId?: IntFieldUpdateOperationsInput | number
    employeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EntrepriseScalarRelationFilter = {
    is?: EntrepriseWhereInput
    isNot?: EntrepriseWhereInput
  }

  export type OrdinateurNullableScalarRelationFilter = {
    is?: OrdinateurWhereInput | null
    isNot?: OrdinateurWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EmployeOrderByRelevanceInput = {
    fields: EmployeOrderByRelevanceFieldEnum | EmployeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EmployeCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    mail?: SortOrder
    age?: SortOrder
    Genre?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    entrepriseId?: SortOrder
    ordinateurID?: SortOrder
  }

  export type EmployeAvgOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    entrepriseId?: SortOrder
    ordinateurID?: SortOrder
  }

  export type EmployeMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    mail?: SortOrder
    age?: SortOrder
    Genre?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    entrepriseId?: SortOrder
    ordinateurID?: SortOrder
  }

  export type EmployeMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    mail?: SortOrder
    age?: SortOrder
    Genre?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    entrepriseId?: SortOrder
    ordinateurID?: SortOrder
  }

  export type EmployeSumOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    entrepriseId?: SortOrder
    ordinateurID?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EmployeListRelationFilter = {
    every?: EmployeWhereInput
    some?: EmployeWhereInput
    none?: EmployeWhereInput
  }

  export type OrdinateurListRelationFilter = {
    every?: OrdinateurWhereInput
    some?: OrdinateurWhereInput
    none?: OrdinateurWhereInput
  }

  export type EmployeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrdinateurOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EntrepriseOrderByRelevanceInput = {
    fields: EntrepriseOrderByRelevanceFieldEnum | EntrepriseOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EntrepriseCountOrderByAggregateInput = {
    raisonSociale?: SortOrder
    siret?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type EntrepriseAvgOrderByAggregateInput = {
    siret?: SortOrder
  }

  export type EntrepriseMaxOrderByAggregateInput = {
    raisonSociale?: SortOrder
    siret?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type EntrepriseMinOrderByAggregateInput = {
    raisonSociale?: SortOrder
    siret?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type EntrepriseSumOrderByAggregateInput = {
    siret?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EmployeNullableScalarRelationFilter = {
    is?: EmployeWhereInput | null
    isNot?: EmployeWhereInput | null
  }

  export type OrdinateurOrderByRelevanceInput = {
    fields: OrdinateurOrderByRelevanceFieldEnum | OrdinateurOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OrdinateurCountOrderByAggregateInput = {
    id?: SortOrder
    macAdress?: SortOrder
    Working?: SortOrder
    entrepriseId?: SortOrder
    employeId?: SortOrder
  }

  export type OrdinateurAvgOrderByAggregateInput = {
    id?: SortOrder
    entrepriseId?: SortOrder
    employeId?: SortOrder
  }

  export type OrdinateurMaxOrderByAggregateInput = {
    id?: SortOrder
    macAdress?: SortOrder
    Working?: SortOrder
    entrepriseId?: SortOrder
    employeId?: SortOrder
  }

  export type OrdinateurMinOrderByAggregateInput = {
    id?: SortOrder
    macAdress?: SortOrder
    Working?: SortOrder
    entrepriseId?: SortOrder
    employeId?: SortOrder
  }

  export type OrdinateurSumOrderByAggregateInput = {
    id?: SortOrder
    entrepriseId?: SortOrder
    employeId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EntrepriseCreateNestedOneWithoutEmployesInput = {
    create?: XOR<EntrepriseCreateWithoutEmployesInput, EntrepriseUncheckedCreateWithoutEmployesInput>
    connectOrCreate?: EntrepriseCreateOrConnectWithoutEmployesInput
    connect?: EntrepriseWhereUniqueInput
  }

  export type OrdinateurCreateNestedOneWithoutEmployeInput = {
    create?: XOR<OrdinateurCreateWithoutEmployeInput, OrdinateurUncheckedCreateWithoutEmployeInput>
    connectOrCreate?: OrdinateurCreateOrConnectWithoutEmployeInput
    connect?: OrdinateurWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EntrepriseUpdateOneRequiredWithoutEmployesNestedInput = {
    create?: XOR<EntrepriseCreateWithoutEmployesInput, EntrepriseUncheckedCreateWithoutEmployesInput>
    connectOrCreate?: EntrepriseCreateOrConnectWithoutEmployesInput
    upsert?: EntrepriseUpsertWithoutEmployesInput
    connect?: EntrepriseWhereUniqueInput
    update?: XOR<XOR<EntrepriseUpdateToOneWithWhereWithoutEmployesInput, EntrepriseUpdateWithoutEmployesInput>, EntrepriseUncheckedUpdateWithoutEmployesInput>
  }

  export type OrdinateurUpdateOneWithoutEmployeNestedInput = {
    create?: XOR<OrdinateurCreateWithoutEmployeInput, OrdinateurUncheckedCreateWithoutEmployeInput>
    connectOrCreate?: OrdinateurCreateOrConnectWithoutEmployeInput
    upsert?: OrdinateurUpsertWithoutEmployeInput
    disconnect?: OrdinateurWhereInput | boolean
    delete?: OrdinateurWhereInput | boolean
    connect?: OrdinateurWhereUniqueInput
    update?: XOR<XOR<OrdinateurUpdateToOneWithWhereWithoutEmployeInput, OrdinateurUpdateWithoutEmployeInput>, OrdinateurUncheckedUpdateWithoutEmployeInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EmployeCreateNestedManyWithoutEntrepriseInput = {
    create?: XOR<EmployeCreateWithoutEntrepriseInput, EmployeUncheckedCreateWithoutEntrepriseInput> | EmployeCreateWithoutEntrepriseInput[] | EmployeUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: EmployeCreateOrConnectWithoutEntrepriseInput | EmployeCreateOrConnectWithoutEntrepriseInput[]
    createMany?: EmployeCreateManyEntrepriseInputEnvelope
    connect?: EmployeWhereUniqueInput | EmployeWhereUniqueInput[]
  }

  export type OrdinateurCreateNestedManyWithoutEntrepriseInput = {
    create?: XOR<OrdinateurCreateWithoutEntrepriseInput, OrdinateurUncheckedCreateWithoutEntrepriseInput> | OrdinateurCreateWithoutEntrepriseInput[] | OrdinateurUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: OrdinateurCreateOrConnectWithoutEntrepriseInput | OrdinateurCreateOrConnectWithoutEntrepriseInput[]
    createMany?: OrdinateurCreateManyEntrepriseInputEnvelope
    connect?: OrdinateurWhereUniqueInput | OrdinateurWhereUniqueInput[]
  }

  export type EmployeUncheckedCreateNestedManyWithoutEntrepriseInput = {
    create?: XOR<EmployeCreateWithoutEntrepriseInput, EmployeUncheckedCreateWithoutEntrepriseInput> | EmployeCreateWithoutEntrepriseInput[] | EmployeUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: EmployeCreateOrConnectWithoutEntrepriseInput | EmployeCreateOrConnectWithoutEntrepriseInput[]
    createMany?: EmployeCreateManyEntrepriseInputEnvelope
    connect?: EmployeWhereUniqueInput | EmployeWhereUniqueInput[]
  }

  export type OrdinateurUncheckedCreateNestedManyWithoutEntrepriseInput = {
    create?: XOR<OrdinateurCreateWithoutEntrepriseInput, OrdinateurUncheckedCreateWithoutEntrepriseInput> | OrdinateurCreateWithoutEntrepriseInput[] | OrdinateurUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: OrdinateurCreateOrConnectWithoutEntrepriseInput | OrdinateurCreateOrConnectWithoutEntrepriseInput[]
    createMany?: OrdinateurCreateManyEntrepriseInputEnvelope
    connect?: OrdinateurWhereUniqueInput | OrdinateurWhereUniqueInput[]
  }

  export type EmployeUpdateManyWithoutEntrepriseNestedInput = {
    create?: XOR<EmployeCreateWithoutEntrepriseInput, EmployeUncheckedCreateWithoutEntrepriseInput> | EmployeCreateWithoutEntrepriseInput[] | EmployeUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: EmployeCreateOrConnectWithoutEntrepriseInput | EmployeCreateOrConnectWithoutEntrepriseInput[]
    upsert?: EmployeUpsertWithWhereUniqueWithoutEntrepriseInput | EmployeUpsertWithWhereUniqueWithoutEntrepriseInput[]
    createMany?: EmployeCreateManyEntrepriseInputEnvelope
    set?: EmployeWhereUniqueInput | EmployeWhereUniqueInput[]
    disconnect?: EmployeWhereUniqueInput | EmployeWhereUniqueInput[]
    delete?: EmployeWhereUniqueInput | EmployeWhereUniqueInput[]
    connect?: EmployeWhereUniqueInput | EmployeWhereUniqueInput[]
    update?: EmployeUpdateWithWhereUniqueWithoutEntrepriseInput | EmployeUpdateWithWhereUniqueWithoutEntrepriseInput[]
    updateMany?: EmployeUpdateManyWithWhereWithoutEntrepriseInput | EmployeUpdateManyWithWhereWithoutEntrepriseInput[]
    deleteMany?: EmployeScalarWhereInput | EmployeScalarWhereInput[]
  }

  export type OrdinateurUpdateManyWithoutEntrepriseNestedInput = {
    create?: XOR<OrdinateurCreateWithoutEntrepriseInput, OrdinateurUncheckedCreateWithoutEntrepriseInput> | OrdinateurCreateWithoutEntrepriseInput[] | OrdinateurUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: OrdinateurCreateOrConnectWithoutEntrepriseInput | OrdinateurCreateOrConnectWithoutEntrepriseInput[]
    upsert?: OrdinateurUpsertWithWhereUniqueWithoutEntrepriseInput | OrdinateurUpsertWithWhereUniqueWithoutEntrepriseInput[]
    createMany?: OrdinateurCreateManyEntrepriseInputEnvelope
    set?: OrdinateurWhereUniqueInput | OrdinateurWhereUniqueInput[]
    disconnect?: OrdinateurWhereUniqueInput | OrdinateurWhereUniqueInput[]
    delete?: OrdinateurWhereUniqueInput | OrdinateurWhereUniqueInput[]
    connect?: OrdinateurWhereUniqueInput | OrdinateurWhereUniqueInput[]
    update?: OrdinateurUpdateWithWhereUniqueWithoutEntrepriseInput | OrdinateurUpdateWithWhereUniqueWithoutEntrepriseInput[]
    updateMany?: OrdinateurUpdateManyWithWhereWithoutEntrepriseInput | OrdinateurUpdateManyWithWhereWithoutEntrepriseInput[]
    deleteMany?: OrdinateurScalarWhereInput | OrdinateurScalarWhereInput[]
  }

  export type EmployeUncheckedUpdateManyWithoutEntrepriseNestedInput = {
    create?: XOR<EmployeCreateWithoutEntrepriseInput, EmployeUncheckedCreateWithoutEntrepriseInput> | EmployeCreateWithoutEntrepriseInput[] | EmployeUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: EmployeCreateOrConnectWithoutEntrepriseInput | EmployeCreateOrConnectWithoutEntrepriseInput[]
    upsert?: EmployeUpsertWithWhereUniqueWithoutEntrepriseInput | EmployeUpsertWithWhereUniqueWithoutEntrepriseInput[]
    createMany?: EmployeCreateManyEntrepriseInputEnvelope
    set?: EmployeWhereUniqueInput | EmployeWhereUniqueInput[]
    disconnect?: EmployeWhereUniqueInput | EmployeWhereUniqueInput[]
    delete?: EmployeWhereUniqueInput | EmployeWhereUniqueInput[]
    connect?: EmployeWhereUniqueInput | EmployeWhereUniqueInput[]
    update?: EmployeUpdateWithWhereUniqueWithoutEntrepriseInput | EmployeUpdateWithWhereUniqueWithoutEntrepriseInput[]
    updateMany?: EmployeUpdateManyWithWhereWithoutEntrepriseInput | EmployeUpdateManyWithWhereWithoutEntrepriseInput[]
    deleteMany?: EmployeScalarWhereInput | EmployeScalarWhereInput[]
  }

  export type OrdinateurUncheckedUpdateManyWithoutEntrepriseNestedInput = {
    create?: XOR<OrdinateurCreateWithoutEntrepriseInput, OrdinateurUncheckedCreateWithoutEntrepriseInput> | OrdinateurCreateWithoutEntrepriseInput[] | OrdinateurUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: OrdinateurCreateOrConnectWithoutEntrepriseInput | OrdinateurCreateOrConnectWithoutEntrepriseInput[]
    upsert?: OrdinateurUpsertWithWhereUniqueWithoutEntrepriseInput | OrdinateurUpsertWithWhereUniqueWithoutEntrepriseInput[]
    createMany?: OrdinateurCreateManyEntrepriseInputEnvelope
    set?: OrdinateurWhereUniqueInput | OrdinateurWhereUniqueInput[]
    disconnect?: OrdinateurWhereUniqueInput | OrdinateurWhereUniqueInput[]
    delete?: OrdinateurWhereUniqueInput | OrdinateurWhereUniqueInput[]
    connect?: OrdinateurWhereUniqueInput | OrdinateurWhereUniqueInput[]
    update?: OrdinateurUpdateWithWhereUniqueWithoutEntrepriseInput | OrdinateurUpdateWithWhereUniqueWithoutEntrepriseInput[]
    updateMany?: OrdinateurUpdateManyWithWhereWithoutEntrepriseInput | OrdinateurUpdateManyWithWhereWithoutEntrepriseInput[]
    deleteMany?: OrdinateurScalarWhereInput | OrdinateurScalarWhereInput[]
  }

  export type EntrepriseCreateNestedOneWithoutOrdinateursInput = {
    create?: XOR<EntrepriseCreateWithoutOrdinateursInput, EntrepriseUncheckedCreateWithoutOrdinateursInput>
    connectOrCreate?: EntrepriseCreateOrConnectWithoutOrdinateursInput
    connect?: EntrepriseWhereUniqueInput
  }

  export type EmployeCreateNestedOneWithoutOrdinateurInput = {
    create?: XOR<EmployeCreateWithoutOrdinateurInput, EmployeUncheckedCreateWithoutOrdinateurInput>
    connectOrCreate?: EmployeCreateOrConnectWithoutOrdinateurInput
    connect?: EmployeWhereUniqueInput
  }

  export type EmployeUncheckedCreateNestedOneWithoutOrdinateurInput = {
    create?: XOR<EmployeCreateWithoutOrdinateurInput, EmployeUncheckedCreateWithoutOrdinateurInput>
    connectOrCreate?: EmployeCreateOrConnectWithoutOrdinateurInput
    connect?: EmployeWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EntrepriseUpdateOneRequiredWithoutOrdinateursNestedInput = {
    create?: XOR<EntrepriseCreateWithoutOrdinateursInput, EntrepriseUncheckedCreateWithoutOrdinateursInput>
    connectOrCreate?: EntrepriseCreateOrConnectWithoutOrdinateursInput
    upsert?: EntrepriseUpsertWithoutOrdinateursInput
    connect?: EntrepriseWhereUniqueInput
    update?: XOR<XOR<EntrepriseUpdateToOneWithWhereWithoutOrdinateursInput, EntrepriseUpdateWithoutOrdinateursInput>, EntrepriseUncheckedUpdateWithoutOrdinateursInput>
  }

  export type EmployeUpdateOneWithoutOrdinateurNestedInput = {
    create?: XOR<EmployeCreateWithoutOrdinateurInput, EmployeUncheckedCreateWithoutOrdinateurInput>
    connectOrCreate?: EmployeCreateOrConnectWithoutOrdinateurInput
    upsert?: EmployeUpsertWithoutOrdinateurInput
    disconnect?: EmployeWhereInput | boolean
    delete?: EmployeWhereInput | boolean
    connect?: EmployeWhereUniqueInput
    update?: XOR<XOR<EmployeUpdateToOneWithWhereWithoutOrdinateurInput, EmployeUpdateWithoutOrdinateurInput>, EmployeUncheckedUpdateWithoutOrdinateurInput>
  }

  export type EmployeUncheckedUpdateOneWithoutOrdinateurNestedInput = {
    create?: XOR<EmployeCreateWithoutOrdinateurInput, EmployeUncheckedCreateWithoutOrdinateurInput>
    connectOrCreate?: EmployeCreateOrConnectWithoutOrdinateurInput
    upsert?: EmployeUpsertWithoutOrdinateurInput
    disconnect?: EmployeWhereInput | boolean
    delete?: EmployeWhereInput | boolean
    connect?: EmployeWhereUniqueInput
    update?: XOR<XOR<EmployeUpdateToOneWithWhereWithoutOrdinateurInput, EmployeUpdateWithoutOrdinateurInput>, EmployeUncheckedUpdateWithoutOrdinateurInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EntrepriseCreateWithoutEmployesInput = {
    raisonSociale: string
    siret: number
    firstName: string
    lastName: string
    email: string
    password: string
    ordinateurs?: OrdinateurCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseUncheckedCreateWithoutEmployesInput = {
    raisonSociale: string
    siret: number
    firstName: string
    lastName: string
    email: string
    password: string
    ordinateurs?: OrdinateurUncheckedCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseCreateOrConnectWithoutEmployesInput = {
    where: EntrepriseWhereUniqueInput
    create: XOR<EntrepriseCreateWithoutEmployesInput, EntrepriseUncheckedCreateWithoutEmployesInput>
  }

  export type OrdinateurCreateWithoutEmployeInput = {
    macAdress: string
    Working?: boolean
    employeId?: number | null
    entreprise: EntrepriseCreateNestedOneWithoutOrdinateursInput
  }

  export type OrdinateurUncheckedCreateWithoutEmployeInput = {
    id?: number
    macAdress: string
    Working?: boolean
    entrepriseId: number
    employeId?: number | null
  }

  export type OrdinateurCreateOrConnectWithoutEmployeInput = {
    where: OrdinateurWhereUniqueInput
    create: XOR<OrdinateurCreateWithoutEmployeInput, OrdinateurUncheckedCreateWithoutEmployeInput>
  }

  export type EntrepriseUpsertWithoutEmployesInput = {
    update: XOR<EntrepriseUpdateWithoutEmployesInput, EntrepriseUncheckedUpdateWithoutEmployesInput>
    create: XOR<EntrepriseCreateWithoutEmployesInput, EntrepriseUncheckedCreateWithoutEmployesInput>
    where?: EntrepriseWhereInput
  }

  export type EntrepriseUpdateToOneWithWhereWithoutEmployesInput = {
    where?: EntrepriseWhereInput
    data: XOR<EntrepriseUpdateWithoutEmployesInput, EntrepriseUncheckedUpdateWithoutEmployesInput>
  }

  export type EntrepriseUpdateWithoutEmployesInput = {
    raisonSociale?: StringFieldUpdateOperationsInput | string
    siret?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ordinateurs?: OrdinateurUpdateManyWithoutEntrepriseNestedInput
  }

  export type EntrepriseUncheckedUpdateWithoutEmployesInput = {
    raisonSociale?: StringFieldUpdateOperationsInput | string
    siret?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ordinateurs?: OrdinateurUncheckedUpdateManyWithoutEntrepriseNestedInput
  }

  export type OrdinateurUpsertWithoutEmployeInput = {
    update: XOR<OrdinateurUpdateWithoutEmployeInput, OrdinateurUncheckedUpdateWithoutEmployeInput>
    create: XOR<OrdinateurCreateWithoutEmployeInput, OrdinateurUncheckedCreateWithoutEmployeInput>
    where?: OrdinateurWhereInput
  }

  export type OrdinateurUpdateToOneWithWhereWithoutEmployeInput = {
    where?: OrdinateurWhereInput
    data: XOR<OrdinateurUpdateWithoutEmployeInput, OrdinateurUncheckedUpdateWithoutEmployeInput>
  }

  export type OrdinateurUpdateWithoutEmployeInput = {
    macAdress?: StringFieldUpdateOperationsInput | string
    Working?: BoolFieldUpdateOperationsInput | boolean
    employeId?: NullableIntFieldUpdateOperationsInput | number | null
    entreprise?: EntrepriseUpdateOneRequiredWithoutOrdinateursNestedInput
  }

  export type OrdinateurUncheckedUpdateWithoutEmployeInput = {
    id?: IntFieldUpdateOperationsInput | number
    macAdress?: StringFieldUpdateOperationsInput | string
    Working?: BoolFieldUpdateOperationsInput | boolean
    entrepriseId?: IntFieldUpdateOperationsInput | number
    employeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EmployeCreateWithoutEntrepriseInput = {
    firstName: string
    lastName: string
    mail: string
    age: number
    Genre: string
    password: string
    avatar?: string
    ordinateur?: OrdinateurCreateNestedOneWithoutEmployeInput
  }

  export type EmployeUncheckedCreateWithoutEntrepriseInput = {
    id?: number
    firstName: string
    lastName: string
    mail: string
    age: number
    Genre: string
    password: string
    avatar?: string
    ordinateurID?: number | null
  }

  export type EmployeCreateOrConnectWithoutEntrepriseInput = {
    where: EmployeWhereUniqueInput
    create: XOR<EmployeCreateWithoutEntrepriseInput, EmployeUncheckedCreateWithoutEntrepriseInput>
  }

  export type EmployeCreateManyEntrepriseInputEnvelope = {
    data: EmployeCreateManyEntrepriseInput | EmployeCreateManyEntrepriseInput[]
    skipDuplicates?: boolean
  }

  export type OrdinateurCreateWithoutEntrepriseInput = {
    macAdress: string
    Working?: boolean
    employeId?: number | null
    employe?: EmployeCreateNestedOneWithoutOrdinateurInput
  }

  export type OrdinateurUncheckedCreateWithoutEntrepriseInput = {
    id?: number
    macAdress: string
    Working?: boolean
    employeId?: number | null
    employe?: EmployeUncheckedCreateNestedOneWithoutOrdinateurInput
  }

  export type OrdinateurCreateOrConnectWithoutEntrepriseInput = {
    where: OrdinateurWhereUniqueInput
    create: XOR<OrdinateurCreateWithoutEntrepriseInput, OrdinateurUncheckedCreateWithoutEntrepriseInput>
  }

  export type OrdinateurCreateManyEntrepriseInputEnvelope = {
    data: OrdinateurCreateManyEntrepriseInput | OrdinateurCreateManyEntrepriseInput[]
    skipDuplicates?: boolean
  }

  export type EmployeUpsertWithWhereUniqueWithoutEntrepriseInput = {
    where: EmployeWhereUniqueInput
    update: XOR<EmployeUpdateWithoutEntrepriseInput, EmployeUncheckedUpdateWithoutEntrepriseInput>
    create: XOR<EmployeCreateWithoutEntrepriseInput, EmployeUncheckedCreateWithoutEntrepriseInput>
  }

  export type EmployeUpdateWithWhereUniqueWithoutEntrepriseInput = {
    where: EmployeWhereUniqueInput
    data: XOR<EmployeUpdateWithoutEntrepriseInput, EmployeUncheckedUpdateWithoutEntrepriseInput>
  }

  export type EmployeUpdateManyWithWhereWithoutEntrepriseInput = {
    where: EmployeScalarWhereInput
    data: XOR<EmployeUpdateManyMutationInput, EmployeUncheckedUpdateManyWithoutEntrepriseInput>
  }

  export type EmployeScalarWhereInput = {
    AND?: EmployeScalarWhereInput | EmployeScalarWhereInput[]
    OR?: EmployeScalarWhereInput[]
    NOT?: EmployeScalarWhereInput | EmployeScalarWhereInput[]
    id?: IntFilter<"Employe"> | number
    firstName?: StringFilter<"Employe"> | string
    lastName?: StringFilter<"Employe"> | string
    mail?: StringFilter<"Employe"> | string
    age?: IntFilter<"Employe"> | number
    Genre?: StringFilter<"Employe"> | string
    password?: StringFilter<"Employe"> | string
    avatar?: StringFilter<"Employe"> | string
    entrepriseId?: IntFilter<"Employe"> | number
    ordinateurID?: IntNullableFilter<"Employe"> | number | null
  }

  export type OrdinateurUpsertWithWhereUniqueWithoutEntrepriseInput = {
    where: OrdinateurWhereUniqueInput
    update: XOR<OrdinateurUpdateWithoutEntrepriseInput, OrdinateurUncheckedUpdateWithoutEntrepriseInput>
    create: XOR<OrdinateurCreateWithoutEntrepriseInput, OrdinateurUncheckedCreateWithoutEntrepriseInput>
  }

  export type OrdinateurUpdateWithWhereUniqueWithoutEntrepriseInput = {
    where: OrdinateurWhereUniqueInput
    data: XOR<OrdinateurUpdateWithoutEntrepriseInput, OrdinateurUncheckedUpdateWithoutEntrepriseInput>
  }

  export type OrdinateurUpdateManyWithWhereWithoutEntrepriseInput = {
    where: OrdinateurScalarWhereInput
    data: XOR<OrdinateurUpdateManyMutationInput, OrdinateurUncheckedUpdateManyWithoutEntrepriseInput>
  }

  export type OrdinateurScalarWhereInput = {
    AND?: OrdinateurScalarWhereInput | OrdinateurScalarWhereInput[]
    OR?: OrdinateurScalarWhereInput[]
    NOT?: OrdinateurScalarWhereInput | OrdinateurScalarWhereInput[]
    id?: IntFilter<"Ordinateur"> | number
    macAdress?: StringFilter<"Ordinateur"> | string
    Working?: BoolFilter<"Ordinateur"> | boolean
    entrepriseId?: IntFilter<"Ordinateur"> | number
    employeId?: IntNullableFilter<"Ordinateur"> | number | null
  }

  export type EntrepriseCreateWithoutOrdinateursInput = {
    raisonSociale: string
    siret: number
    firstName: string
    lastName: string
    email: string
    password: string
    employes?: EmployeCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseUncheckedCreateWithoutOrdinateursInput = {
    raisonSociale: string
    siret: number
    firstName: string
    lastName: string
    email: string
    password: string
    employes?: EmployeUncheckedCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseCreateOrConnectWithoutOrdinateursInput = {
    where: EntrepriseWhereUniqueInput
    create: XOR<EntrepriseCreateWithoutOrdinateursInput, EntrepriseUncheckedCreateWithoutOrdinateursInput>
  }

  export type EmployeCreateWithoutOrdinateurInput = {
    firstName: string
    lastName: string
    mail: string
    age: number
    Genre: string
    password: string
    avatar?: string
    entreprise: EntrepriseCreateNestedOneWithoutEmployesInput
  }

  export type EmployeUncheckedCreateWithoutOrdinateurInput = {
    id?: number
    firstName: string
    lastName: string
    mail: string
    age: number
    Genre: string
    password: string
    avatar?: string
    entrepriseId: number
  }

  export type EmployeCreateOrConnectWithoutOrdinateurInput = {
    where: EmployeWhereUniqueInput
    create: XOR<EmployeCreateWithoutOrdinateurInput, EmployeUncheckedCreateWithoutOrdinateurInput>
  }

  export type EntrepriseUpsertWithoutOrdinateursInput = {
    update: XOR<EntrepriseUpdateWithoutOrdinateursInput, EntrepriseUncheckedUpdateWithoutOrdinateursInput>
    create: XOR<EntrepriseCreateWithoutOrdinateursInput, EntrepriseUncheckedCreateWithoutOrdinateursInput>
    where?: EntrepriseWhereInput
  }

  export type EntrepriseUpdateToOneWithWhereWithoutOrdinateursInput = {
    where?: EntrepriseWhereInput
    data: XOR<EntrepriseUpdateWithoutOrdinateursInput, EntrepriseUncheckedUpdateWithoutOrdinateursInput>
  }

  export type EntrepriseUpdateWithoutOrdinateursInput = {
    raisonSociale?: StringFieldUpdateOperationsInput | string
    siret?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    employes?: EmployeUpdateManyWithoutEntrepriseNestedInput
  }

  export type EntrepriseUncheckedUpdateWithoutOrdinateursInput = {
    raisonSociale?: StringFieldUpdateOperationsInput | string
    siret?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    employes?: EmployeUncheckedUpdateManyWithoutEntrepriseNestedInput
  }

  export type EmployeUpsertWithoutOrdinateurInput = {
    update: XOR<EmployeUpdateWithoutOrdinateurInput, EmployeUncheckedUpdateWithoutOrdinateurInput>
    create: XOR<EmployeCreateWithoutOrdinateurInput, EmployeUncheckedCreateWithoutOrdinateurInput>
    where?: EmployeWhereInput
  }

  export type EmployeUpdateToOneWithWhereWithoutOrdinateurInput = {
    where?: EmployeWhereInput
    data: XOR<EmployeUpdateWithoutOrdinateurInput, EmployeUncheckedUpdateWithoutOrdinateurInput>
  }

  export type EmployeUpdateWithoutOrdinateurInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    Genre?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    entreprise?: EntrepriseUpdateOneRequiredWithoutEmployesNestedInput
  }

  export type EmployeUncheckedUpdateWithoutOrdinateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    Genre?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    entrepriseId?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeCreateManyEntrepriseInput = {
    id?: number
    firstName: string
    lastName: string
    mail: string
    age: number
    Genre: string
    password: string
    avatar?: string
    ordinateurID?: number | null
  }

  export type OrdinateurCreateManyEntrepriseInput = {
    id?: number
    macAdress: string
    Working?: boolean
    employeId?: number | null
  }

  export type EmployeUpdateWithoutEntrepriseInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    Genre?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    ordinateur?: OrdinateurUpdateOneWithoutEmployeNestedInput
  }

  export type EmployeUncheckedUpdateWithoutEntrepriseInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    Genre?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    ordinateurID?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EmployeUncheckedUpdateManyWithoutEntrepriseInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    Genre?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    ordinateurID?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrdinateurUpdateWithoutEntrepriseInput = {
    macAdress?: StringFieldUpdateOperationsInput | string
    Working?: BoolFieldUpdateOperationsInput | boolean
    employeId?: NullableIntFieldUpdateOperationsInput | number | null
    employe?: EmployeUpdateOneWithoutOrdinateurNestedInput
  }

  export type OrdinateurUncheckedUpdateWithoutEntrepriseInput = {
    id?: IntFieldUpdateOperationsInput | number
    macAdress?: StringFieldUpdateOperationsInput | string
    Working?: BoolFieldUpdateOperationsInput | boolean
    employeId?: NullableIntFieldUpdateOperationsInput | number | null
    employe?: EmployeUncheckedUpdateOneWithoutOrdinateurNestedInput
  }

  export type OrdinateurUncheckedUpdateManyWithoutEntrepriseInput = {
    id?: IntFieldUpdateOperationsInput | number
    macAdress?: StringFieldUpdateOperationsInput | string
    Working?: BoolFieldUpdateOperationsInput | boolean
    employeId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}